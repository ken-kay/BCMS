def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

//GMS brings errors updated
//apply plugin: 'com.google.gms.google-screens.services'
apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'

android {
    //compileSdkVersion 29
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.nani.bcms_app"
        //minSdkVersion 16
        minSdkVersion 21
        //targetSdkVersion 29
        targetSdkVersion 28
        //multidex addition
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    //added this section to try fixing reimport issue
    /*
    compileOptions {
        //enable support for new language APIs
        coreLibraryDesugaringEnabled true
        //Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    */

}

flutter {
    source '../..'
}


dependencies {
    //implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "com.google.android.material:material:1.1.0"
        //for appcompat support
    //implementation "com.android.support:support-compat:29.0.0"
    implementation "com.android.support:support-compat:28.0.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    //androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    //androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    //Firebase SDK for Google Analytics
    implementation 'com.google.firebase:firebase-analytics:17.5.0'
        //multidex implementation
    implementation 'com.android.support:multidex:1.0.3'
}


